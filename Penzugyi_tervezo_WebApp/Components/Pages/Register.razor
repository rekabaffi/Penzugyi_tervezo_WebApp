@page "/register"
@rendermode InteractiveServer
@using Penzugyi_tervezo_WebApp.Models
@using Penzugyi_tervezo_WebApp.Services
@inject UserService UserService
@inject NavigationManager NavManager

<h3>Register</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(IsError ? "alert-danger" : "alert-success")">@Message</div>
}

<EditForm Model="@registerDto" OnValidSubmit="@RegisterTask">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Username</label>
        <InputText @bind-Value="registerDto.username" class="form-control" />
        <ValidationMessage For="@(() => registerDto.username)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText @bind-Value="registerDto.email" type="email" class="form-control" />
        <ValidationMessage For="@(() => registerDto.email)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Password</label>
        <InputText @bind-Value="registerDto.password" type="password" class="form-control" />
        <ValidationMessage For="@(() => registerDto.password)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@IsLoading">
        @if (IsLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status"></span>
        }
        Register
    </button>

    <button type="button" class="btn btn-link" @onclick="GoToLogin">
        Back to Login
    </button>
</EditForm>

@code {
    private UserRegisterDto registerDto = new();
    private string Message = string.Empty;
    private bool IsError = false;
    private bool IsLoading = false;

    private async Task RegisterTask()
    {
        IsLoading = true;
        Message = string.Empty;

        try
        {
            var result = await UserService.RegisterAsync(registerDto);
            if (!string.IsNullOrEmpty(result) && result.Contains("exists"))
            {
                Message = result;
                IsError = true;
            }
            else
            {
                Message = "Registration successful!";
                IsError = false;
                await Task.Delay(1500);
                NavManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Message = $"Registration failed: {ex.Message}";
            IsError = true;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void GoToLogin()
    {
        NavManager.NavigateTo("/login");
    }
}
